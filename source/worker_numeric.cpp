//
// worker_numeric.cpp
// ~~~~~~~~~~~~~~~~~~
//
// Author: Joseph Adomatis
// Copyright (c) 2020 Joseph R Adomatis (joseph dot adomatis at gmail dot com)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iomanip>
#include <sstream>
#include <string>

#include "../headers/erasmus_namespace.hpp"
#include "../headers/worker_numeric.hpp"

using namespace erasmus;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global variable definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global function definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erasmus::workerNumeric member definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constructors
///////////////////////////////////////////////////////////////////////////////

workerNumeric::workerNumeric()
{
    
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::workerNumeric::charToHex
///////////////////////////////////////////////////////////////////////////////

bool workerNumeric::charToHex(char original, std::string& revised)
{
    bool returnValue{true};
    revised.clear();
    std::stringstream ss;
    ss << std::uppercase << std::setfill('0') << std::setw(2) << std::hex << static_cast<int>(original);
    ss >> revised;
    return(returnValue);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::workerNumeric::isHex
///////////////////////////////////////////////////////////////////////////////

bool workerNumeric::isHex(char c)
{
    bool returnValue{(c >= '0' && c <= '9')};
    returnValue |= (c >= 'a' && c <= 'f');
    returnValue |= (c >= 'A' && c <= 'F'); 
    return(returnValue);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::workerNumeric::uintToHex
///////////////////////////////////////////////////////////////////////////////

bool workerNumeric::uintToHex(size_t original, std::string& revised)
{
    bool returnValue{true};
    revised.clear();
    std::stringstream ss;
    ss << std::uppercase << std::hex << original;
    ss >> revised;
    return(returnValue);
}

///////////////////////////////////////////////////////////////////////////////
// Deconstructor
///////////////////////////////////////////////////////////////////////////////

workerNumeric::~workerNumeric()
{

}