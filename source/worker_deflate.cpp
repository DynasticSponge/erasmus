//
// worker_deflate.cpp
// ~~~~~~~~~~~~~~~~~~
//
// Author: Joseph Adomatis
// Copyright (c) 2020 Joseph R Adomatis (joseph dot adomatis at gmail dot com)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>
#include <vector>

#include "../headers/erasmus_namespace.hpp"
#include "../headers/worker_deflate.hpp"

using namespace erasmus;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global variable definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global function definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erasmus::workerDeflate member definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////////////////////////

workerDeflate::workerDeflate()
{

}

///////////////////////////////////////////////////////////////////////////////
// erasmus::workerDeflate::deflate
///////////////////////////////////////////////////////////////////////////////

bool workerDeflate::deflate(const std::string& original, std::string& revised)
{
    bool returnValue{true};
    return(returnValue);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::workerDeflate::findMatches
///////////////////////////////////////////////////////////////////////////////

bool workerDeflate::findMatches(const std::string& original)
{
    std::string window;
    size_t maxWindow{32768};
    size_t originalSize = original.size();
    if(originalSize < maxWindow)
    {
        maxWindow = originalSize;
    }
    for(size_t originalIndex = 0; originalIndex < originalSize; originalIndex++)
    {
        
    }
    return(true);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::workerDeflate::inflate
///////////////////////////////////////////////////////////////////////////////

bool workerDeflate::inflate(const std::string& original, std::string& revised)
{
    bool returnValue{true};
    return(returnValue);
}

///////////////////////////////////////////////////////////////////////////////
// Deconstructor
///////////////////////////////////////////////////////////////////////////////

workerDeflate::~workerDeflate()
{

}