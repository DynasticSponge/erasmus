//
// data_match.cpp
// ~~~~~~~~~~~~~~
//
// Author: Joseph Adomatis
// Copyright (c) 2020 Joseph R Adomatis (joseph dot adomatis at gmail dot com)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>
#include <string_view>

#include "../headers/erasmus_namespace.hpp"
#include "../headers/data_match.hpp"

using namespace erasmus;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global variable definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global function definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch member definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////////////////////////

dataMatch::dataMatch(size_t pStart, size_t mStart, size_t mLength)
{
    this->firstStart = pStart;
    this->matchStart = mStart;
    this->matchLength = mLength;
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::getDistance
///////////////////////////////////////////////////////////////////////////////

size_t dataMatch::getDistance()
{
    return(this->matchStart - this->firstStart);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::getLength
///////////////////////////////////////////////////////////////////////////////

size_t dataMatch::getLength()
{
    return(this->matchLength);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::getPrevious
///////////////////////////////////////////////////////////////////////////////

size_t dataMatch::getPrevious()
{
    return(this->firstStart);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::getStart
///////////////////////////////////////////////////////////////////////////////

size_t dataMatch::getStart()
{
    return(this->matchStart);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::postBack
///////////////////////////////////////////////////////////////////////////////

void dataMatch::postBack(size_t len)
{
    if(len > 0)
    {
        this->matchLength += len;
    }
    return;
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::trimBack
///////////////////////////////////////////////////////////////////////////////

void dataMatch::trimBack(size_t len)
{
    if(len > 0)
    {
        this->matchLength -= len;
    }
    return;
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::trimFront
///////////////////////////////////////////////////////////////////////////////

void dataMatch::trimFront(size_t len)
{
    if(len > 0)
    {
        this->matchStart += len;
        this->matchLength -= len;
    }
    return;
}

///////////////////////////////////////////////////////////////////////////////
// Deconstructor
///////////////////////////////////////////////////////////////////////////////

dataMatch::~dataMatch()
{
    
}