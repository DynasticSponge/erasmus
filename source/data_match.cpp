//
// data_match.cpp
// ~~~~~~~~~~~~~~
//
// Author: Joseph Adomatis
// Copyright (c) 2020 Joseph R Adomatis (joseph dot adomatis at gmail dot com)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>

#include "../headers/erasmus_namespace.hpp"
#include "../headers/data_match.hpp"

using namespace erasmus;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global variable definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global function definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch member definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////////////////////////

dataMatch::dataMatch(const std::string& original, size_t pStart, size_t mStart):source(original)
{
    this->active = true;
    this->previousStart = pStart;
    this->matchStart = mStart;
    this->matchEnd = matchEnd;
    this->matchString.push_back(original[pStart]);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::addChar
///////////////////////////////////////////////////////////////////////////////

bool erasmus::dataMatch::addChar(char)
{

}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::getDistance
///////////////////////////////////////////////////////////////////////////////

size_t erasmus::dataMatch::getDistance()
{
    return(this->matchStart - this->previousStart);
}

///////////////////////////////////////////////////////////////////////////////
// erasmus::dataMatch::getLength
///////////////////////////////////////////////////////////////////////////////

size_t erasmus::dataMatch::getLength()
{
    
}

///////////////////////////////////////////////////////////////////////////////
// Deconstructor
///////////////////////////////////////////////////////////////////////////////

dataMatch::~dataMatch()
{
    
}